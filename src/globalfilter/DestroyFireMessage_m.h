//
// Generated file, do not edit! Created by nedtool 4.6 from src/globalfilter/DestroyFireMessage.msg.
//

#ifndef _DESTROYFIREMESSAGE_M_H_
#define _DESTROYFIREMESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "PhysicalAttackWrapper.h"
// }}

/**
 * Class generated from <tt>src/globalfilter/DestroyFireMessage.msg:15</tt> by nedtool.
 * <pre>
 * message DestroyFireMessage
 * {
 *     PhysicalAttackWrapper physicalAttackWrapper;
 * 
 * }
 * </pre>
 */
class DestroyFireMessage : public ::cMessage
{
  protected:
    PhysicalAttackWrapper physicalAttackWrapper_var;

  private:
    void copy(const DestroyFireMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DestroyFireMessage&);

  public:
    DestroyFireMessage(const char *name=NULL, int kind=0);
    DestroyFireMessage(const DestroyFireMessage& other);
    virtual ~DestroyFireMessage();
    DestroyFireMessage& operator=(const DestroyFireMessage& other);
    virtual DestroyFireMessage *dup() const {return new DestroyFireMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual PhysicalAttackWrapper& getPhysicalAttackWrapper();
    virtual const PhysicalAttackWrapper& getPhysicalAttackWrapper() const {return const_cast<DestroyFireMessage*>(this)->getPhysicalAttackWrapper();}
    virtual void setPhysicalAttackWrapper(const PhysicalAttackWrapper& physicalAttackWrapper);
};

inline void doPacking(cCommBuffer *b, DestroyFireMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DestroyFireMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef _DESTROYFIREMESSAGE_M_H_

