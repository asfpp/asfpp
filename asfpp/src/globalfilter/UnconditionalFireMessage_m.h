//
// Generated file, do not edit! Created by nedtool 5.4 from globalfilter/UnconditionalFireMessage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __UNCONDITIONALFIREMESSAGE_M_H
#define __UNCONDITIONALFIREMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>globalfilter/UnconditionalFireMessage.msg:7</tt> by nedtool.
 * <pre>
 * message UnconditionalFireMessage
 * {
 *     int index;
 * 
 * }
 * </pre>
 */
class UnconditionalFireMessage : public ::omnetpp::cMessage
{
  protected:
    int index;

  private:
    void copy(const UnconditionalFireMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UnconditionalFireMessage&);

  public:
    UnconditionalFireMessage(const char *name=nullptr, short kind=0);
    UnconditionalFireMessage(const UnconditionalFireMessage& other);
    virtual ~UnconditionalFireMessage();
    UnconditionalFireMessage& operator=(const UnconditionalFireMessage& other);
    virtual UnconditionalFireMessage *dup() const override {return new UnconditionalFireMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getIndex() const;
    virtual void setIndex(int index);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UnconditionalFireMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UnconditionalFireMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __UNCONDITIONALFIREMESSAGE_M_H

