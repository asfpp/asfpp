//
// Generated file, do not edit! Created by nedtool 5.4 from node/application/ApplicationPacket.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __APPLICATIONPACKET_M_H
#define __APPLICATIONPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Struct generated from node/application/ApplicationPacket.msg:21 by nedtool.
 */
struct AppNetInfoExchange_type
{
    AppNetInfoExchange_type();
    double RSSI;
    double LQI;
    ::omnetpp::opp_string source;
    ::omnetpp::opp_string destination;
    ::omnetpp::simtime_t timestamp;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const AppNetInfoExchange_type& a);
void __doUnpacking(omnetpp::cCommBuffer *b, AppNetInfoExchange_type& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AppNetInfoExchange_type& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AppNetInfoExchange_type& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>node/application/ApplicationPacket.msg:33</tt> by nedtool.
 * <pre>
 * packet ApplicationPacket
 * {
 *     AppNetInfoExchange_type appNetInfoExchange;
 * 
 *     string applicationID;		// virtual app uses application ID to filter packet delivery.
 *     unsigned int sequenceNumber;// a field to distinguish between packets
 *     double data;				// a simple type to carry some data
 * 
 *     int sended;	// Used to know if the packet has to be sent to the next layer <A.P.>
 *     int filtered;	// Used to check if the packet has been already processed by the current node <A.P.>
 *     int compromised;  // A. P.
 * }
 * </pre>
 */
class ApplicationPacket : public ::omnetpp::cPacket
{
  protected:
    AppNetInfoExchange_type appNetInfoExchange;
    ::omnetpp::opp_string applicationID;
    unsigned int sequenceNumber;
    double data;
    int sended;
    int filtered;
    int compromised;

  private:
    void copy(const ApplicationPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ApplicationPacket&);

  public:
    ApplicationPacket(const char *name=nullptr, short kind=0);
    ApplicationPacket(const ApplicationPacket& other);
    virtual ~ApplicationPacket();
    ApplicationPacket& operator=(const ApplicationPacket& other);
    virtual ApplicationPacket *dup() const override {return new ApplicationPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual AppNetInfoExchange_type& getAppNetInfoExchange();
    virtual const AppNetInfoExchange_type& getAppNetInfoExchange() const {return const_cast<ApplicationPacket*>(this)->getAppNetInfoExchange();}
    virtual void setAppNetInfoExchange(const AppNetInfoExchange_type& appNetInfoExchange);
    virtual const char * getApplicationID() const;
    virtual void setApplicationID(const char * applicationID);
    virtual unsigned int getSequenceNumber() const;
    virtual void setSequenceNumber(unsigned int sequenceNumber);
    virtual double getData() const;
    virtual void setData(double data);
    virtual int getSended() const;
    virtual void setSended(int sended);
    virtual int getFiltered() const;
    virtual void setFiltered(int filtered);
    virtual int getCompromised() const;
    virtual void setCompromised(int compromised);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ApplicationPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ApplicationPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __APPLICATIONPACKET_M_H

