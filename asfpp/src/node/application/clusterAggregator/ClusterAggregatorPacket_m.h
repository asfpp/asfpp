//
// Generated file, do not edit! Created by nedtool 5.4 from node/application/clusterAggregator/ClusterAggregatorPacket.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __CLUSTERAGGREGATORPACKET_M_H
#define __CLUSTERAGGREGATORPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "ApplicationPacket_m.h"
// }}

/**
 * Class generated from <tt>node/application/clusterAggregator/ClusterAggregatorPacket.msg:19</tt> by nedtool.
 * <pre>
 * packet ClusterAggregatorDataPacket extends ApplicationPacket
 * {
 *     int sourceNodeID;
 * 	// digest field for packet authentication
 *     int digest;
 * }
 * </pre>
 */
class ClusterAggregatorDataPacket : public ::ApplicationPacket
{
  protected:
    int sourceNodeID;
    int digest;

  private:
    void copy(const ClusterAggregatorDataPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ClusterAggregatorDataPacket&);

  public:
    ClusterAggregatorDataPacket(const char *name=nullptr, short kind=0);
    ClusterAggregatorDataPacket(const ClusterAggregatorDataPacket& other);
    virtual ~ClusterAggregatorDataPacket();
    ClusterAggregatorDataPacket& operator=(const ClusterAggregatorDataPacket& other);
    virtual ClusterAggregatorDataPacket *dup() const override {return new ClusterAggregatorDataPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSourceNodeID() const;
    virtual void setSourceNodeID(int sourceNodeID);
    virtual int getDigest() const;
    virtual void setDigest(int digest);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ClusterAggregatorDataPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ClusterAggregatorDataPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __CLUSTERAGGREGATORPACKET_M_H

