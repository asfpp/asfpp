//
// Generated file, do not edit! Created by nedtool 5.4 from node/application/valueReporting/ValueReportingPacket.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __VALUEREPORTINGPACKET_M_H
#define __VALUEREPORTINGPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "ApplicationPacket_m.h"
// }}

/**
 * Struct generated from node/application/valueReporting/ValueReportingPacket.msg:19 by nedtool.
 */
struct ValueReportData
{
    ValueReportData();
    unsigned short nodeID;
    double locX;
    double locY;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const ValueReportData& a);
void __doUnpacking(omnetpp::cCommBuffer *b, ValueReportData& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ValueReportData& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ValueReportData& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>node/application/valueReporting/ValueReportingPacket.msg:25</tt> by nedtool.
 * <pre>
 * packet ValueReportingDataPacket extends ApplicationPacket
 * {
 *     ValueReportData extraData;
 * }
 * </pre>
 */
class ValueReportingDataPacket : public ::ApplicationPacket
{
  protected:
    ValueReportData extraData;

  private:
    void copy(const ValueReportingDataPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ValueReportingDataPacket&);

  public:
    ValueReportingDataPacket(const char *name=nullptr, short kind=0);
    ValueReportingDataPacket(const ValueReportingDataPacket& other);
    virtual ~ValueReportingDataPacket();
    ValueReportingDataPacket& operator=(const ValueReportingDataPacket& other);
    virtual ValueReportingDataPacket *dup() const override {return new ValueReportingDataPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual ValueReportData& getExtraData();
    virtual const ValueReportData& getExtraData() const {return const_cast<ValueReportingDataPacket*>(this)->getExtraData();}
    virtual void setExtraData(const ValueReportData& extraData);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ValueReportingDataPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ValueReportingDataPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __VALUEREPORTINGPACKET_M_H

