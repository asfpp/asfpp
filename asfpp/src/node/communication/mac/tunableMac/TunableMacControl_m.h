//
// Generated file, do not edit! Created by nedtool 5.4 from node/communication/mac/tunableMac/TunableMacControl.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __TUNABLEMACCONTROL_M_H
#define __TUNABLEMACCONTROL_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>node/communication/mac/tunableMac/TunableMacControl.msg:13</tt> by nedtool.
 * <pre>
 * enum TunableMacCommandDef
 * {
 *     SET_DUTY_CYCLE = 1;
 *     SET_LISTEN_INTERVAL = 2;
 *     SET_BEACON_INTERVAL_FRACTION = 3;
 *     SET_PROB_TX = 4;
 *     SET_NUM_TX = 5;
 *     SET_RANDOM_TX_OFFSET = 6;
 *     SET_RETX_INTERVAL = 7;
 *     SET_BACKOFF_TYPE = 8;
 *     SET_BACKOFF_BASE_VALUE = 9;
 * }
 * </pre>
 */
enum TunableMacCommandDef {
    SET_DUTY_CYCLE = 1,
    SET_LISTEN_INTERVAL = 2,
    SET_BEACON_INTERVAL_FRACTION = 3,
    SET_PROB_TX = 4,
    SET_NUM_TX = 5,
    SET_RANDOM_TX_OFFSET = 6,
    SET_RETX_INTERVAL = 7,
    SET_BACKOFF_TYPE = 8,
    SET_BACKOFF_BASE_VALUE = 9
};

/**
 * Class generated from <tt>node/communication/mac/tunableMac/TunableMacControl.msg:25</tt> by nedtool.
 * <pre>
 * message TunableMacControlCommand
 * {
 *     int tunableMacCommandKind \@enum(TunableMacCommandDef);
 *     double parameter = 0;
 * }
 * </pre>
 */
class TunableMacControlCommand : public ::omnetpp::cMessage
{
  protected:
    int tunableMacCommandKind;
    double parameter;

  private:
    void copy(const TunableMacControlCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TunableMacControlCommand&);

  public:
    TunableMacControlCommand(const char *name=nullptr, short kind=0);
    TunableMacControlCommand(const TunableMacControlCommand& other);
    virtual ~TunableMacControlCommand();
    TunableMacControlCommand& operator=(const TunableMacControlCommand& other);
    virtual TunableMacControlCommand *dup() const override {return new TunableMacControlCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getTunableMacCommandKind() const;
    virtual void setTunableMacCommandKind(int tunableMacCommandKind);
    virtual double getParameter() const;
    virtual void setParameter(double parameter);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TunableMacControlCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TunableMacControlCommand& obj) {obj.parsimUnpack(b);}


#endif // ifndef __TUNABLEMACCONTROL_M_H

