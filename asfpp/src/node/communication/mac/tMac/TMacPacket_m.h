//
// Generated file, do not edit! Created by nedtool 5.4 from node/communication/mac/tMac/TMacPacket.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __TMACPACKET_M_H
#define __TMACPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "MacPacket_m.h"
// }}

/**
 * Enum generated from <tt>node/communication/mac/tMac/TMacPacket.msg:19</tt> by nedtool.
 * <pre>
 * enum TmacPacket_type
 * {
 *     SYNC_TMAC_PACKET = 1;
 *     RTS_TMAC_PACKET = 2;
 *     CTS_TMAC_PACKET = 3;
 *     DS_TMAC_PACKET = 4;
 *     FRTS_TMAC_PACKET = 5;
 *     DATA_TMAC_PACKET = 6;
 *     ACK_TMAC_PACKET = 7;
 * }
 * </pre>
 */
enum TmacPacket_type {
    SYNC_TMAC_PACKET = 1,
    RTS_TMAC_PACKET = 2,
    CTS_TMAC_PACKET = 3,
    DS_TMAC_PACKET = 4,
    FRTS_TMAC_PACKET = 5,
    DATA_TMAC_PACKET = 6,
    ACK_TMAC_PACKET = 7
};

/**
 * Class generated from <tt>node/communication/mac/tMac/TMacPacket.msg:29</tt> by nedtool.
 * <pre>
 * packet TMacPacket extends MacPacket
 * {
 *     // This a basic field, essential for any packet
 *     // size including source and destination field (found 
 *     // in the generic MacPAcket) is 9 bytes in total
 *     int type \@enum(TmacPacket_type);	// 1 byte
 * 
 *     // RTS and CTS frames also contain nav field, bringing their size to 13 bytes
 *     simtime_t nav = 0;					// 4 bytes
 * 
 * 	// Sequence number is essential for ACK and DATA frames, but they do not 
 * 	// contain NAV field, therefore the size of ACK packet and MAC 
 * 	// layer overhead in general is 11 bytes. We use the field in the
 * 	// generic MacPacket and count it as 2 bytes.
 * 
 *     // SYNC packet has only three fields: sequence number, sync value and sync ID, 
 *     // making its total size only 11 bytes (1 extra byte comes from packet type) 
 *     // In reality, SYNC id would probably be stored in source field and sync 
 *     // value in NAV field. But in this model we do not create a separate packet 
 *     // subclass for each packet type
 *     simtime_t sync = 0;					// 4 bytes
 *     int syncId = 0;						// 4 bytes
 * }
 * </pre>
 */
class TMacPacket : public ::MacPacket
{
  protected:
    int type;
    ::omnetpp::simtime_t nav;
    ::omnetpp::simtime_t sync;
    int syncId;

  private:
    void copy(const TMacPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TMacPacket&);

  public:
    TMacPacket(const char *name=nullptr, short kind=0);
    TMacPacket(const TMacPacket& other);
    virtual ~TMacPacket();
    TMacPacket& operator=(const TMacPacket& other);
    virtual TMacPacket *dup() const override {return new TMacPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual ::omnetpp::simtime_t getNav() const;
    virtual void setNav(::omnetpp::simtime_t nav);
    virtual ::omnetpp::simtime_t getSync() const;
    virtual void setSync(::omnetpp::simtime_t sync);
    virtual int getSyncId() const;
    virtual void setSyncId(int syncId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TMacPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TMacPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __TMACPACKET_M_H

