//
// Generated file, do not edit! Created by nedtool 5.4 from node/communication/mac/MacPacket.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __MACPACKET_M_H
#define __MACPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>node/communication/mac/MacPacket.msg:13</tt> by nedtool.
 * <pre>
 * enum MacControlMessage_type
 * {
 *     MAC_BUFFER_FULL = 1;
 * }
 * 
 * // We need to pass information between MAC and the Radio which is external
 * // to the packet i.e. not carried by a real packet (e.g., what was the 
 * // RSSI for the packet received) but this information is related to the
 * // specific packet. Since information is passed between modules with
 * // messages/packets, we decided to encode this kind of external info as a 
 * // separate structure in the packet. The fields there are handled by the
 * // virtualMAC code, setting a framework of interaction.
 * </pre>
 */
enum MacControlMessage_type {
    MAC_BUFFER_FULL = 1
};

/**
 * Struct generated from node/communication/mac/MacPacket.msg:25 by nedtool.
 */
struct MacRadioInfoExchange_type
{
    MacRadioInfoExchange_type();
    double RSSI;
    double LQI;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const MacRadioInfoExchange_type& a);
void __doUnpacking(omnetpp::cCommBuffer *b, MacRadioInfoExchange_type& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MacRadioInfoExchange_type& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MacRadioInfoExchange_type& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>node/communication/mac/MacPacket.msg:30</tt> by nedtool.
 * <pre>
 * packet MacPacket
 * {
 *     MacRadioInfoExchange_type macRadioInfoExchange;
 * 
 *     int source;
 *     int destination;
 *     unsigned int sequenceNumber;
 *     int filtered;	// Used to check if the packet has been already processed by the current node <A.P.>
 *     int sended;	// Used to know if the packet has to be sent to the next layer <A.P.>
 *     int compromised; // A.P. 
 * }
 * </pre>
 */
class MacPacket : public ::omnetpp::cPacket
{
  protected:
    MacRadioInfoExchange_type macRadioInfoExchange;
    int source;
    int destination;
    unsigned int sequenceNumber;
    int filtered;
    int sended;
    int compromised;

  private:
    void copy(const MacPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MacPacket&);

  public:
    MacPacket(const char *name=nullptr, short kind=0);
    MacPacket(const MacPacket& other);
    virtual ~MacPacket();
    MacPacket& operator=(const MacPacket& other);
    virtual MacPacket *dup() const override {return new MacPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual MacRadioInfoExchange_type& getMacRadioInfoExchange();
    virtual const MacRadioInfoExchange_type& getMacRadioInfoExchange() const {return const_cast<MacPacket*>(this)->getMacRadioInfoExchange();}
    virtual void setMacRadioInfoExchange(const MacRadioInfoExchange_type& macRadioInfoExchange);
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual unsigned int getSequenceNumber() const;
    virtual void setSequenceNumber(unsigned int sequenceNumber);
    virtual int getFiltered() const;
    virtual void setFiltered(int filtered);
    virtual int getSended() const;
    virtual void setSended(int sended);
    virtual int getCompromised() const;
    virtual void setCompromised(int compromised);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MacPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MacPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>node/communication/mac/MacPacket.msg:41</tt> by nedtool.
 * <pre>
 * message MacControlMessage
 * {
 *     int macControlMessageKind \@enum(MacControlMessage_type);
 * }
 * </pre>
 */
class MacControlMessage : public ::omnetpp::cMessage
{
  protected:
    int macControlMessageKind;

  private:
    void copy(const MacControlMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MacControlMessage&);

  public:
    MacControlMessage(const char *name=nullptr, short kind=0);
    MacControlMessage(const MacControlMessage& other);
    virtual ~MacControlMessage();
    MacControlMessage& operator=(const MacControlMessage& other);
    virtual MacControlMessage *dup() const override {return new MacControlMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getMacControlMessageKind() const;
    virtual void setMacControlMessageKind(int macControlMessageKind);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MacControlMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MacControlMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MACPACKET_M_H

