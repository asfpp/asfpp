//
// Generated file, do not edit! Created by nedtool 5.4 from node/communication/routing/aodvRouting/AodvRoutingPacket.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __AODVROUTINGPACKET_M_H
#define __AODVROUTINGPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "PacketId_m.h"
// }}

/**
 * Class generated from <tt>node/communication/routing/aodvRouting/AodvRoutingPacket.msg:23</tt> by nedtool.
 * <pre>
 * //id =1
 * packet AodvRREQPacket extends PacketId
 * {
 *     bool flagJ;
 *     bool flagR;
 *     bool flagG;
 *     bool flagD;
 *     bool flagU;
 *     int hopCount;
 *     int rreqID;
 *     string sourceAodv;
 *     unsigned long sourceSeqNum;
 *     unsigned long destinationSeqNum;
 *     string destinationAodv;
 *     unsigned int ttl;
 * }
 * </pre>
 */
class AodvRREQPacket : public ::PacketId
{
  protected:
    bool flagJ;
    bool flagR;
    bool flagG;
    bool flagD;
    bool flagU;
    int hopCount;
    int rreqID;
    ::omnetpp::opp_string sourceAodv;
    unsigned long sourceSeqNum;
    unsigned long destinationSeqNum;
    ::omnetpp::opp_string destinationAodv;
    unsigned int ttl;

  private:
    void copy(const AodvRREQPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AodvRREQPacket&);

  public:
    AodvRREQPacket(const char *name=nullptr, short kind=0);
    AodvRREQPacket(const AodvRREQPacket& other);
    virtual ~AodvRREQPacket();
    AodvRREQPacket& operator=(const AodvRREQPacket& other);
    virtual AodvRREQPacket *dup() const override {return new AodvRREQPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual bool getFlagJ() const;
    virtual void setFlagJ(bool flagJ);
    virtual bool getFlagR() const;
    virtual void setFlagR(bool flagR);
    virtual bool getFlagG() const;
    virtual void setFlagG(bool flagG);
    virtual bool getFlagD() const;
    virtual void setFlagD(bool flagD);
    virtual bool getFlagU() const;
    virtual void setFlagU(bool flagU);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual int getRreqID() const;
    virtual void setRreqID(int rreqID);
    virtual const char * getSourceAodv() const;
    virtual void setSourceAodv(const char * sourceAodv);
    virtual unsigned long getSourceSeqNum() const;
    virtual void setSourceSeqNum(unsigned long sourceSeqNum);
    virtual unsigned long getDestinationSeqNum() const;
    virtual void setDestinationSeqNum(unsigned long destinationSeqNum);
    virtual const char * getDestinationAodv() const;
    virtual void setDestinationAodv(const char * destinationAodv);
    virtual unsigned int getTtl() const;
    virtual void setTtl(unsigned int ttl);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AodvRREQPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AodvRREQPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>node/communication/routing/aodvRouting/AodvRoutingPacket.msg:38</tt> by nedtool.
 * <pre>
 * //id =5
 * packet AodvHelloMessage extends PacketId
 * {
 *     unsigned long destinationSeqNum;
 * }
 * </pre>
 */
class AodvHelloMessage : public ::PacketId
{
  protected:
    unsigned long destinationSeqNum;

  private:
    void copy(const AodvHelloMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AodvHelloMessage&);

  public:
    AodvHelloMessage(const char *name=nullptr, short kind=0);
    AodvHelloMessage(const AodvHelloMessage& other);
    virtual ~AodvHelloMessage();
    AodvHelloMessage& operator=(const AodvHelloMessage& other);
    virtual AodvHelloMessage *dup() const override {return new AodvHelloMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned long getDestinationSeqNum() const;
    virtual void setDestinationSeqNum(unsigned long destinationSeqNum);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AodvHelloMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AodvHelloMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>node/communication/routing/aodvRouting/AodvRoutingPacket.msg:44</tt> by nedtool.
 * <pre>
 * //id =4
 * packet AodvRREPAckPacket extends PacketId
 * {
 * }
 * </pre>
 */
class AodvRREPAckPacket : public ::PacketId
{
  protected:

  private:
    void copy(const AodvRREPAckPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AodvRREPAckPacket&);

  public:
    AodvRREPAckPacket(const char *name=nullptr, short kind=0);
    AodvRREPAckPacket(const AodvRREPAckPacket& other);
    virtual ~AodvRREPAckPacket();
    AodvRREPAckPacket& operator=(const AodvRREPAckPacket& other);
    virtual AodvRREPAckPacket *dup() const override {return new AodvRREPAckPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AodvRREPAckPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AodvRREPAckPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>node/communication/routing/aodvRouting/AodvRoutingPacket.msg:49</tt> by nedtool.
 * <pre>
 * //id =3
 * packet AodvRERRPacket extends PacketId
 * {
 *     bool flagN;
 *     int destCount;
 *     string unreachableDestAddr[];
 *     unsigned long unreachableDestSeqNum[];
 * }
 * </pre>
 */
class AodvRERRPacket : public ::PacketId
{
  protected:
    bool flagN;
    int destCount;
    ::omnetpp::opp_string *unreachableDestAddr; // array ptr
    unsigned int unreachableDestAddr_arraysize;
    unsigned long *unreachableDestSeqNum; // array ptr
    unsigned int unreachableDestSeqNum_arraysize;

  private:
    void copy(const AodvRERRPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AodvRERRPacket&);

  public:
    AodvRERRPacket(const char *name=nullptr, short kind=0);
    AodvRERRPacket(const AodvRERRPacket& other);
    virtual ~AodvRERRPacket();
    AodvRERRPacket& operator=(const AodvRERRPacket& other);
    virtual AodvRERRPacket *dup() const override {return new AodvRERRPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual bool getFlagN() const;
    virtual void setFlagN(bool flagN);
    virtual int getDestCount() const;
    virtual void setDestCount(int destCount);
    virtual void setUnreachableDestAddrArraySize(unsigned int size);
    virtual unsigned int getUnreachableDestAddrArraySize() const;
    virtual const char * getUnreachableDestAddr(unsigned int k) const;
    virtual void setUnreachableDestAddr(unsigned int k, const char * unreachableDestAddr);
    virtual void setUnreachableDestSeqNumArraySize(unsigned int size);
    virtual unsigned int getUnreachableDestSeqNumArraySize() const;
    virtual unsigned long getUnreachableDestSeqNum(unsigned int k) const;
    virtual void setUnreachableDestSeqNum(unsigned int k, unsigned long unreachableDestSeqNum);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AodvRERRPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AodvRERRPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __AODVROUTINGPACKET_M_H

