//
// Generated file, do not edit! Created by nedtool 5.4 from wirelessChannel/WirelessChannelMessages.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __WIRELESSCHANNELMESSAGES_M_H
#define __WIRELESSCHANNELMESSAGES_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>wirelessChannel/WirelessChannelMessages.msg:13</tt> by nedtool.
 * <pre>
 * message WirelessChannelSignalBegin
 * {
 *     int nodeID;
 *     double power_dBm;
 *     double carrierFreq;
 *     double bandwidth;
 *     int modulationType;
 *     int encodingType;
 *     bool skip;	// A.P. it will be used to skip the constrols on radio
 * }
 * </pre>
 */
class WirelessChannelSignalBegin : public ::omnetpp::cMessage
{
  protected:
    int nodeID;
    double power_dBm;
    double carrierFreq;
    double bandwidth;
    int modulationType;
    int encodingType;
    bool skip;

  private:
    void copy(const WirelessChannelSignalBegin& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WirelessChannelSignalBegin&);

  public:
    WirelessChannelSignalBegin(const char *name=nullptr, short kind=0);
    WirelessChannelSignalBegin(const WirelessChannelSignalBegin& other);
    virtual ~WirelessChannelSignalBegin();
    WirelessChannelSignalBegin& operator=(const WirelessChannelSignalBegin& other);
    virtual WirelessChannelSignalBegin *dup() const override {return new WirelessChannelSignalBegin(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getNodeID() const;
    virtual void setNodeID(int nodeID);
    virtual double getPower_dBm() const;
    virtual void setPower_dBm(double power_dBm);
    virtual double getCarrierFreq() const;
    virtual void setCarrierFreq(double carrierFreq);
    virtual double getBandwidth() const;
    virtual void setBandwidth(double bandwidth);
    virtual int getModulationType() const;
    virtual void setModulationType(int modulationType);
    virtual int getEncodingType() const;
    virtual void setEncodingType(int encodingType);
    virtual bool getSkip() const;
    virtual void setSkip(bool skip);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WirelessChannelSignalBegin& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WirelessChannelSignalBegin& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wirelessChannel/WirelessChannelMessages.msg:25</tt> by nedtool.
 * <pre>
 * // NOTE: signal end is of type 'packet' so we can encapsulate the 
 * // actual packet being transfered
 * packet WirelessChannelSignalEnd
 * {
 *     int nodeID;		//references the original nodeID in signal begin
 *     bool skip;		// A.P. it will be used to skip the constrols on radio
 * }
 * </pre>
 */
class WirelessChannelSignalEnd : public ::omnetpp::cPacket
{
  protected:
    int nodeID;
    bool skip;

  private:
    void copy(const WirelessChannelSignalEnd& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WirelessChannelSignalEnd&);

  public:
    WirelessChannelSignalEnd(const char *name=nullptr, short kind=0);
    WirelessChannelSignalEnd(const WirelessChannelSignalEnd& other);
    virtual ~WirelessChannelSignalEnd();
    WirelessChannelSignalEnd& operator=(const WirelessChannelSignalEnd& other);
    virtual WirelessChannelSignalEnd *dup() const override {return new WirelessChannelSignalEnd(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getNodeID() const;
    virtual void setNodeID(int nodeID);
    virtual bool getSkip() const;
    virtual void setSkip(bool skip);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WirelessChannelSignalEnd& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WirelessChannelSignalEnd& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wirelessChannel/WirelessChannelMessages.msg:30</tt> by nedtool.
 * <pre>
 * message WirelessChannelNodeMoveMessage
 * {
 *     int nodeID;
 *     double x;
 *     double y;
 *     double z;
 *     double phi;
 *     double theta;
 * }
 * </pre>
 */
class WirelessChannelNodeMoveMessage : public ::omnetpp::cMessage
{
  protected:
    int nodeID;
    double x;
    double y;
    double z;
    double phi;
    double theta;

  private:
    void copy(const WirelessChannelNodeMoveMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WirelessChannelNodeMoveMessage&);

  public:
    WirelessChannelNodeMoveMessage(const char *name=nullptr, short kind=0);
    WirelessChannelNodeMoveMessage(const WirelessChannelNodeMoveMessage& other);
    virtual ~WirelessChannelNodeMoveMessage();
    WirelessChannelNodeMoveMessage& operator=(const WirelessChannelNodeMoveMessage& other);
    virtual WirelessChannelNodeMoveMessage *dup() const override {return new WirelessChannelNodeMoveMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getNodeID() const;
    virtual void setNodeID(int nodeID);
    virtual double getX() const;
    virtual void setX(double x);
    virtual double getY() const;
    virtual void setY(double y);
    virtual double getZ() const;
    virtual void setZ(double z);
    virtual double getPhi() const;
    virtual void setPhi(double phi);
    virtual double getTheta() const;
    virtual void setTheta(double theta);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WirelessChannelNodeMoveMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WirelessChannelNodeMoveMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __WIRELESSCHANNELMESSAGES_M_H

